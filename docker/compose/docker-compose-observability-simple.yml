version: '3.8'

services:
  inventory:
    build:
      context: ../..
      dockerfile: src/inventory.api/Dockerfile
    container_name: salesapi-inventory
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=InventoryDb;User Id=sa;Password=Your_password123;TrustServerCertificate=True
      - ConnectionStrings__RabbitMQ=amqp://admin:admin123@host.docker.internal:5672/
      - Jwt__Key=ThisIsASecretKeyForJWTTokenGenerationAndValidation2024!
      - Jwt__Issuer=SalesAPI-Gateway
      - Jwt__Audience=SalesAPI-Services
    ports:
      - "5000:8080"
    networks:
      - salesapi-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  sales:
    build:
      context: ../..
      dockerfile: src/sales.api/Dockerfile
    container_name: salesapi-sales
    restart: unless-stopped
    depends_on:
      - inventory
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal;Database=SalesDb;User Id=sa;Password=Your_password123;TrustServerCertificate=True
      - ConnectionStrings__RabbitMQ=amqp://admin:admin123@host.docker.internal:5672/
      - Services__InventoryApi=http://inventory:8080
      - Jwt__Key=ThisIsASecretKeyForJWTTokenGenerationAndValidation2024!
      - Jwt__Issuer=SalesAPI-Gateway
      - Jwt__Audience=SalesAPI-Services
    ports:
      - "5001:8080"
    networks:
      - salesapi-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  gateway:
    build:
      context: ../..
      dockerfile: src/gateway/Dockerfile
    container_name: salesapi-gateway
    restart: unless-stopped
    depends_on:
      - inventory
      - sales
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - Jwt__Key=ThisIsASecretKeyForJWTTokenGenerationAndValidation2024!
      - Jwt__Issuer=SalesAPI-Gateway
      - Jwt__Audience=SalesAPI-Services
    ports:
      - "6000:8080"
    networks:
      - salesapi-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Include Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: salesapi-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - salesapi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  salesapi-network:
    driver: bridge

volumes:
  prometheus_data: